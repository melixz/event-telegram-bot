import os
from datetime import datetime, date
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from dotenv import load_dotenv

from database import get_user, add_user, update_user, get_all_user_ids, init_db
from messages import (
    START_MESSAGE,
    GREETING_OPTIONS,
    GREETING_MESSAGES,
    THANK_YOU_MESSAGE,
    FINAL_MESSAGE,
    REMINDER_MESSAGE,
)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_API_TOKEN")

# –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ
EVENT_START = datetime(2024, 12, 11)
EVENT_END = datetime(2024, 12, 15)
TOTAL_DAYS = 5

IMAGE_URL = "NY_3.png"  # –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é


def get_current_day_number():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å 1.
    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–Ω—å—à–µ EVENT_START, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ EVENT_END - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TOTAL_DAYS.
    """
    today = date.today()
    start_date = EVENT_START.date()
    if today < start_date:
        return 0
    delta = (today - start_date).days + 1
    if delta > TOTAL_DAYS:
        delta = TOTAL_DAYS
    return delta


def get_allowed_greetings_count():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é.
    """
    current_day_number = get_current_day_number()
    return min(current_day_number, TOTAL_DAYS)


def get_available_greetings_for_user(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (index, text) –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —É—á–∏—Ç—ã–≤–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.
    """
    user = get_user(user_id)
    if not user:
        return list(enumerate(GREETING_OPTIONS))

    selected_str = user["selected_greetings"]
    selected_indices = [int(x) for x in selected_str.strip().split(",") if x.isdigit()]

    available = [
        (i, GREETING_OPTIONS[i])
        for i in range(len(GREETING_OPTIONS))
        if i not in selected_indices
    ]
    return available


async def show_greetings_menu(user_id, application):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π.
    """
    user = get_user(user_id)
    if not user:
        add_user(user_id)
        user = get_user(user_id)

    allowed_count = get_allowed_greetings_count()
    if allowed_count == 0:
        # –°–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
        await application.bot.send_message(
            chat_id=user_id,
            text="–°–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        )
        return

    selected_str = user["selected_greetings"]
    selected_indices = [int(x) for x in selected_str.strip().split(",") if x.isdigit()]
    chosen_count = len(selected_indices)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏–ª–∏ –≤–æ–æ–±—â–µ
    if chosen_count >= allowed_count:
        if chosen_count < TOTAL_DAYS:
            # –ï—â–µ –±—É–¥—É—Ç –¥–Ω–∏ –≤–ø–µ—Ä–µ–¥–∏
            await application.bot.send_message(chat_id=user_id, text=THANK_YOU_MESSAGE)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
            await application.bot.send_message(chat_id=user_id, text=FINAL_MESSAGE)
        return

    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
    available = get_available_greetings_for_user(user_id)
    if not available:
        # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –≤–æ–æ–±—â–µ
        await application.bot.send_message(chat_id=user_id, text=FINAL_MESSAGE)
        return

    keyboard = [
        [InlineKeyboardButton(text=f"{i + 1} üéÅ", callback_data=f"greeting_{idx}")]
        for i, (idx, text) in enumerate(available)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open(IMAGE_URL, "rb") as photo:
        await application.bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=START_MESSAGE,
            reply_markup=reply_markup,
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–∂–µ–ª–∞–Ω–∏–π.
    """
    user_id = update.message.from_user.id
    await show_greetings_menu(user_id, context.application)


async def handle_inline_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è".
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "show_greetings"
    if callback_data == "show_greetings":
        await show_greetings_menu(user_id, context.application)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º
    if not callback_data.startswith("greeting_"):
        return

    user = get_user(user_id)
    if not user:
        add_user(user_id)
        user = get_user(user_id)

    allowed_count = get_allowed_greetings_count()
    selected_str = user["selected_greetings"]
    selected_indices = [int(x) for x in selected_str.strip().split(",") if x.isdigit()]
    chosen_count = len(selected_indices)

    if chosen_count >= allowed_count:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        await query.message.reply_text(
            "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∂–µ–ª–∞–Ω–∏—è."
        )
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return

    selected_index = int(callback_data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–Ω–µ–µ
    if selected_index in selected_indices:
        # –≠—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ
        if query.message.text:
            await query.edit_message_text("–≠—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–Ω–µ–µ.")
        else:
            await query.message.reply_text("–≠—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–Ω–µ–µ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    selected_indices.append(selected_index)
    new_selected_str = ",".join(str(i) for i in selected_indices)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    today_str = date.today().isoformat()
    update_user(user_id, new_selected_str, today_str)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    greeting_text = GREETING_MESSAGES[selected_index]

    if query.message.text:
        await query.edit_message_text(greeting_text)
    else:
        await query.message.reply_text(greeting_text)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë
    chosen_count = len(selected_indices)
    if chosen_count < allowed_count:
        # –ï—Å—Ç—å –µ—â—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è
        # –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await show_greetings_menu(user_id, context.application)
    else:
        # –õ–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if chosen_count < TOTAL_DAYS:
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            await query.message.reply_text(THANK_YOU_MESSAGE)
            # **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å**: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞
        else:
            await query.message.reply_text(FINAL_MESSAGE)


async def send_message_to_all_users(application, text):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ü–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ–º,
    –∫—Ç–æ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –ø–æ–∂–µ–ª–∞–Ω–∏—è.
    """
    user_ids = get_all_user_ids()
    for uid in user_ids:
        allowed_count = get_allowed_greetings_count()
        user = get_user(uid)
        selected_str = user["selected_greetings"] if user else ""
        selected_indices = [
            int(x) for x in selected_str.strip().split(",") if x.isdigit()
        ]
        chosen_count = len(selected_indices)
        available = get_available_greetings_for_user(uid)

        if chosen_count < allowed_count and available:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await application.bot.send_message(chat_id=uid, text=REMINDER_MESSAGE)
                # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="show_greetings"
                        )
                    ]
                ]
                await application.bot.send_message(
                    chat_id=uid,
                    text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤–æ–æ–±—â–µ
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –Ω–æ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass


def main():
    init_db()

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_inline_selection))

    from scheduler import start_scheduler

    start_scheduler(application)

    application.run_polling()


if __name__ == "__main__":
    main()
